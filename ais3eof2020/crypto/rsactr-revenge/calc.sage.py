

# This file was *autogenerated* from the file calc.sage
from sage.all_cmdline import *   # import sage library

_sage_const_10000 = Integer(10000); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_4 = Integer(4); _sage_const_5 = Integer(5); _sage_const_128 = Integer(128); _sage_const_2020 = Integer(2020); _sage_const_16 = Integer(16)
import sys
sys.setrecursionlimit(_sage_const_10000 )

def gcd(f1, f2):
    return f1.monic() if f2 == _sage_const_0  else gcd(f2, f1 % f2)

c1 = bytes.fromhex(sys.argv[_sage_const_1 ])
c2 = bytes.fromhex(sys.argv[_sage_const_2 ])
c3 = bytes.fromhex(sys.argv[_sage_const_3 ])
e = int(sys.argv[_sage_const_4 ])
n = int(sys.argv[_sage_const_5 ])

print(f'e={e} c1={c1.hex()}')

P = PolynomialRing(Zmod(n), names=('x',)); (x,) = P._first_ngens(1)

flag = b''
for i in range(_sage_const_0 , len(c1), _sage_const_128 ):
    cc1 = int.from_bytes(c1[i:i+_sage_const_128 ], 'big')
    cc2 = int.from_bytes(c2[i:i+_sage_const_128 ], 'big')
    cc3 = int.from_bytes(c3[i:i+_sage_const_128 ], 'big')

    f1 = (cc1 - x)**e - (cc2 - x)**e + _sage_const_2020  * (len(c1) // _sage_const_128 )
    f2 = (cc2 - x)**e - (cc3 - x)**e + _sage_const_2020  * (len(c1) // _sage_const_128 )

    xx = -gcd(f1, f2).coefficients()[_sage_const_0 ]
    flag += int(xx).to_bytes(_sage_const_16 , 'big')
print(flag)

#
# (c1 - flag) ^ e = nonce
# (c2 - flag) ^ e = nonce + 2020
# (c3 - flag) ^ e = nonce + 4040
#
# becomes:
# (c2 - flag) ^ e - (c1 - flag) ^ e = 2020
# (c3 - flag) ^ e - (c2 - flag) ^ e = 2020


