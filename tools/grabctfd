#!/usr/bin/env python

import json
import requests
from urllib.parse import urlparse
import click
import sys
import os
import re


@click.command()
@click.option("-u", "--username", required=1, help="Username for CTF")
@click.option("-p", "--password", required=1, prompt=True, hide_input=True, help="Password for CTF")
@click.option("--url", required=1, help="URL of CTF running CTFd (include http<s>://)")
@click.option("--loginpath", default="/login", help="Path of login page on CTFd")
@click.option("--apipath", default="/api/v1/challenges", help="Path of API on CTFd")
@click.option("-c", "--category", help="Only downloads challenges in this category")
def main(username, password, url, loginpath, apipath, category):
    url = normalizeURL(url)
    if verifyConnection(url):
        challenges = getChallenges(
            username, password, url, loginpath, apipath, category)
        clone(url, challenges)
    return


def log(m, s):
    if s == 'info':
        print("[*] " + m)
    else:
        sys.exit(m)


def verifyConnection(url):
    try:
        requests.get(url)
        log("Connected to server", "info")
        return 1
    except:
        log("Failed to connect to: " + url, "error")
        return 0


def getChallenges(username, password, url, loginpath, apipath, category):
    challenges = []
    with requests.Session() as s:
        csrf = re.findall("[0-9a-fA-F]{64}", s.get(url+loginpath).text)
        if len(csrf) >= 1:
            if len(csrf) == 1:
                nonce = csrf[0]
            else:
                nonce = csrf[0] if csrf[0] == csrf[1] else csrf[0]+csrf[1]
        if nonce:
            if s.post(url+loginpath, data={'name': username, 'password': password, 'nonce': nonce}).status_code == 200:
                log('Logged in', 'info')
                a = json.loads(s.get(url+apipath).text)
                if a['success']:
                    for d in a['data']:
                        b = json.loads(
                            s.get(url+apipath+'/'+str(d['id'])).text)
                        if b['success']:
                            if category:
                                if category == d['category']:
                                    challenges.append({'id': d['id'], 'name': d['name'], 'category': d['category'],
                                                       'value': d['value'], 'description': b['data']['description'], 'files': b['data']['files']})
                            else:
                                challenges.append({'id': d['id'], 'name': d['name'], 'category': d['category'],
                                                   'value': d['value'], 'description': b['data']['description'], 'files': b['data']['files']})
            else:
                log('Login failed', 'error')
        else:
            log('Nonce not found', 'error')

    return challenges


def clone(url, challenges):
    for c in challenges:
        try:
            path = os.getcwd()+'/'+c['category']+'/'+c['name']+'/'
            os.makedirs(path, exist_ok=True)
        except:
            log('Directory creation failed', 'error')
        if c['files']:
            for f in c['files']:
                log('Downloading ' + c['name'] + ' files...', 'info')
                r = requests.get(url+f, allow_redirects=True)
                open(path+getFilename(url+f), 'wb').write(r.content)
        if
    json.dump(challenges, open('challenges.json', 'w'))


def getFilename(url):
    return os.path.basename(urlparse(url).path)


def normalizeURL(url):
    if url[-1] == '/':
        return url[:-1]
    return url


main()
