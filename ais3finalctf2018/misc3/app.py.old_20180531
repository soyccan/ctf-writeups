#codeing: utf8

from flask import Flask, request, send_from_directory, Response
from jinja2 import Template
import re, time, hashlib, urlparse, urllib, base64, os

app = Flask(__name__)

def sign( v ):
    # len(Key) = 9
    return hashlib.sha256( '.........'+v ).hexdigest()

@app.route("/", methods=['GET','POST'])
def index():

    data_raw = (request.cookies.get('data', ''))
    sig = (request.cookies.get('sig', ''))
    name = ''

    if data_raw != '':
        try:
            # Read From Cookie
            data_raw = base64.b64decode(data_raw)
            data = urlparse.parse_qs(data_raw)

            if "name" in data:
                name = data['name'][-1]


            # Check data sign
            if sign( data_raw ) != sig:
                name = ''
        except Exception as ex:
            print ex


    # Read From Post
    if name == '':
        name = request.form.get('name', '')
        pattern = re.compile("^[ -~]{1,20}$")
        if not pattern.match(name):
            name = ''

    if name == '':
        tpl = open('template/index.tpl').read()
        t = Template(tpl.decode('utf8'))
        return t.render()
    else:

        # TODO: Cookie Validation
        tpl = open('template/index.tpl').read()
        t = Template(tpl.decode('utf8'))
        return t.render()

        data = urllib.urlencode({'name':name})
        resp.set_cookie(key='data', value=base64.b64encode(data), expires=time.time() + 60*60*24*5)
        resp.set_cookie(key='sig', value=sign(data), expires=time.time() + 60*60*24*5)

        return resp


@app.route('/robots.txt', methods=['GET'])
def robots():

    disallow = "Generated by smart robot"
    for f in os.listdir('files'):
        disallow += "Disallow: /files/{0}\n".format(f)

    return "User-agent: *\n" + disallow

@app.route('/files/<path:path>', methods=['GET'])
def serve_file_in_dir(path):
    print('path',path)
    print('path2',os.path.join('files', path))
    print('isfile',os   .path.isfile(os.path.join('files', path)))
    print('send',send_from_directory('files', path))

    # Protect the flag
    if path == 'flag.txt': # ../files/flag.txt
        return "Access Denied"

    if not os.path.isfile(os.path.join('files', path)):
        return "AoA"

    return send_from_directory('files', path)

if __name__ == "__main__":
    app.run(debug=True)

